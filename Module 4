SQL is used a lot for summarising data.

Some real-life business usecases are:
 - No of orders placed daily or monthly
 - No of unique customers every month
 - Yearwise increase in profits or sales
 - Monthwise increase in enrolments
 - Average ratings per course


For these tasks, we'll use Aggregate Functions in MySQL. They are:
 - MAX()
 - MIN()
 - AVG()
 - SUM()
 - COUNT()
aggregate functions will take a series of inputs and produce a single output

SELECT 
     MAX(amount)  AS "highestPayment",
     MIN(amount),
     AVG(amount),
     SUM(amount),
FROM 
     payments;




___________________________________________________________________________________________________________________________________________________________





COUNT(): this only counts the not null values

SELECT COUNT(placedDate) AS totalOrders,
       COUNT(shippedDate) AS shippedOrders
FROM orders;
Output:
totalOrders - 326
shippedOrders - 312

This shows that the records with NULL value in 'shippedOrders' field has not been counted by the COUNT function.

to count all the rows we use:

SELECT COUNT(*) AS totalOrders
FROM orders;

COUNT(*) counts all the rows in the table.


-- TO FIND ORDERS THAT ARE IN PROCESS : demonstrates we can use COUNT() with other clauses too

SELECT COUNT(*) AS Under process
FROM orders
WEHRE status = "In progress";


-- FIND OUT MOST RECENT ORDER FROM ORDERS TABLE : to demonstrate we can use MAX(), MIN() with strings, dates, etc. other than numeric data

SELECT 
     MAX(paymentDate),
     MIN(paymentDate),
FROM orders;

maximum of paymentDate is the largest date and the most recently placed order
same for minimum

I can do the same for strings.
The lexicographically largest string will be the one that comes later in the dictionary.

SELECT 
     MAX(chequeNumber),
     MIN(chequeNumber),
FROM orders;



___________________________________________________________________________________________________________________________________________________________





GROUP BY clause : 
using it with aggregate functions

-- query to find how many total products are there in the products table
SELECT 
    COUNT(*)
FROM products;

-- query to find the total categories there are in the products table
SELECT
    DISTINCT productLine
FROM products;

-- query to find the count of products in each category
SELECT
    productLine,
    COUNT(*)    AS productCount
FROM products
GROUP BY productLine;





-- GROUP BY            SYNTAX

SELECT 
    c1,c2,...,cN, aggregate function(ci)
FROM 
    table
WHERE
    condition  -- this will be used to filter out (eg. the locations only in Asia)
GROUP BY 
    c1,c2,...,cN;

the aggregate function is not included in the GROUP BY clause.
the rule is to write all the columns c1,c2,...cN in the GROUP BY statement. It is a rule.






-- select the count of employees that work in the same office, their office code and the office location 
SELECT 
    e.officeCode,
    o.city,
    COUNT(employeeID)
FROM employees e
JOIN offices o
  ON e.officeCode = o.officeCode
GROUP BY e.officeCode, o.city;

In the above query it will be completely fine if we don't mention o.city in the GROUP BY clause
because officeCode - city is a one-one mapping.
But if it was a one-to-many mapping, then there would have been difficulties.

Suppose:
OfficeCode    -    City
1             -    San Francisco
1             -    London
1             -    Delhi
1             -    Mumbai
2             -    Pune

In this case if we would have written only GROUP BY office code, 
then 
for officeCode = 1, a random city name would have been displayed.

All the cities of officeCode = 1 would have been grouped as a single entity.

But the problem with writing all 3 parameters is the query will take more time to execute. 
Thus we should write only one if it will do the work just fine.

The above query can also be written with the USING clause instead of ON clause:
SELECT 
    e.officeCode,
    o.city,
    COUNT(employeeID)
FROM employees e
JOIN offices o
  USING (officeCode)
GROUP BY e.officeCode, o.city;





___________________________________________________________________________________________________________________________________________________________




HAVING clause:

filter out offices having more than 4 employees

SELECT 
    e.officeCode,
    o.city,
    COUNT(employeeID) AS employeeCount
FROM employees e
JOIN offices o
  USING (officeCode)
WHERE employeeCount > 4    --     this line will give an error : because the employeeCount column hasn't yet been formed
GROUP BY e.officeCode, o.city; 


We can use the WHERE clause for columns that have not used aggregated functions like COUNT()

To solve this problem we will use the HAVING clause:

SELECT 
    officeCode,
    city,
    COUNT (employeeID) AS employeeCount
FROM employees e
JOIN offices o
  USING (officeCode)
  WHERE officeCode IN (1,2,3,5)        -- shows we can apply the WHERE clause too
GROUP BY officeCode
HAVING employeeCount > 4;




___________________________________________________________________________________________________________________________________________________________




BTS : Order of execution of the different clauses in SQL

1. FROM
2. WHERE
3. GROUP BY
4. HAVING
5. SELECT
6. DISTINCT
7. ORDER BY 
8. LIMIT


___________________________________________________________________________________________________________________________________________________________




-- query to display count of orders country-wise    and   display only the count of order > 20
SELECT country
    COUNT(orders) AS orderCount
FROM orders
GROUP BY country
HAVING orderCount > 20;





___________________________________________________________________________________________________________________________________________________________


query 5: there is the order_id, number of products ordered, price of each product
         task is to calculate the total value of each order( multiple items have been ordered in each order )

SELECT order_id,
       SUM(quantity * amount) AS "totalOrderValue"
FROM orders o
GROUP BY order_id
ORDER BY totalOrderValue DESC;



QUERY 6: same as query 5; display customer name alongwith query 5

SELECT firstName,
       order_id,
       SUM(quantity * amount) AS "totalOrderValue"
FROM ordersDetails od
JOIN orders o
  ON ordersDetails.order_id = o.order_id
JOIN customers c
  USING customer_id
GROUP BY order_id
ORDER BY totalOrderValue DESC;


QUERY 7: also display the sales employee
sales employee number is present in the customers table and 
employee name is present in the employee table

so in addition to query 6, join table employees using employee number and display the first name of the sales employee

QUERY 8: print the number of orders that have been placed by each customer

SELECT firstName,
       COUNT(order_id) AS "ordersPlaced"
FROM orders o
JOIN customers c
  USING (customer_id)
GROUP BY customer_id;

we select from orders table because there is no information regarding orders in the customer's table

QUERY 9: number of orders through each sales representative
SELECT COUNT(order_id) AS totalOrders,
       e.employeeNumber,
       employeeName
FROM orders o
JOIN customers c USING (customer_id)
JOIN employees e 
  ON c.salesEmpNUmber = e.employeeNumber
GROUP BY e.employeeNumber;

QUERY 10: country wise count of orders placed on each date

SELECT country,
       orderDate,
       COUNT(*) AS totalOrders
FROM orders o
JOIN customers c USING (cusotmer_id)
GROUP BY country, orderDate;

QUERY 12: display all the customers who's total order value is more than 80,000

SELECT customer_id,
       firstName
       SUM(amount) AS totalValue
FROM orders o
JOIN customers c USING (cusomter_id)
GROUP BY customer_id
HAVING totalValue > 80000;

  






















